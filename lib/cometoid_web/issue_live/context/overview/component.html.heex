<div id="overview-component" class="border-color">
  <%= if @state.search.context_search_active do %>
    <div id="contexts-search-bar" phx-hook="ContextSearchInputHook">
      <.form let={f} for={:context_search} phx-change="changes" phx-target={@myself} phx-submit="select">
        <%= text_input f, :q, autocomplete: :off %>
      </.form>
    </div>
  <% end %>

  <div id="contexts-list" 
       class={"list-base #{if @state.search.context_search_active do "searchbar-included" end}"}>
    <%= for context <- @state.contexts do %>
      <%= if is_nil(@state.selected_context) 
             or @state.selected_context.id == context.id
             or @state.search.context_search_active
          do %>
        <%= live_component ItemComponent, 
          context: context, 
          state: @state %>
        <% end %>
    <% end %>
    <%= if not (is_nil @state.selected_context) and not @state.search.context_search_active do %>
      <ul class="secondary-contexts-selection-box">
        <%= for secondary_context <- @state.selected_context.secondary_contexts do %>
          <li class={"#{if is_selected?(@state, secondary_context.id) do 'selected-issue-color' else 'deselected-issue-color' end}"}
              phx-click="toggle_context"
              phx-value-id={secondary_context.id}
              phx-target={@myself}>
            <%= secondary_context.title %> <%= if @state.selected_secondary_contexts == [] do %>(<%= 
              length Enum.filter @state.issues, 
                fn issue -> 
                  secondary_context.id in (Enum.map issue.contexts, fn relation -> relation.context.id end) 
                end
              %>)
              <% end %>
          </li>
        <% end %>
      </ul>
    <% end %>
  </div>

  <%= if @state.search.issue_search_active do %>
    <div id="context-list-component-mask"
         class="opacity">
    </div>
  <% end %>
</div>